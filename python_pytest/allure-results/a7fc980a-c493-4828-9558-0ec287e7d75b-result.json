{"name": "test_new_version_can_be_created", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL 'None/versions': No schema supplied. Perhaps you meant http://None/versions?", "trace": "self = <src.tests.test_sample_api.TestSampleApi object at 0x04B15100>, api_manager = <src.common.api_manager.ApiManager object at 0x04B15C40>\ntest_data_handler = <src.common.test_data_handler.TestDataHandler object at 0x04B150E8>\n\n    @pytest.mark.smoke_api\n    def test_new_version_can_be_created(self, api_manager,test_data_handler):\n        new_version_payload= {\"title\": \"test\", \"ver\": \"2021\" }\n>       api_manager.make_post_request(api_name=\"versions\", endpoint=\"/versions\", payload=new_version_payload)\n\nsrc\\tests\\test_sample_api.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\common\\api_manager.py:22: in make_post_request\n    response = requests.post(endpoint, json=payload, data=data, headers=headers, files=files, params=params,\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\sessions.py:449: in prepare_request\n    p.prepare(\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\models.py:314: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = 'None/versions', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL 'None/versions': No schema supplied. Perhaps you meant http://None/versions?\n\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\models.py:388: MissingSchema"}, "start": 1641292699122, "stop": 1641292699123, "uuid": "d58945bf-c567-4a57-b7c4-578837bc1bf0", "historyId": "95bc70dc4eccff227fe54fee9f42050f", "testCaseId": "42fae24d66583795b929353622c17887", "fullName": "src.tests.test_sample_api.TestSampleApi#test_new_version_can_be_created", "labels": [{"name": "tag", "value": "smoke_api"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_sample_api"}, {"name": "subSuite", "value": "TestSampleApi"}, {"name": "host", "value": "Michal-PC"}, {"name": "thread", "value": "9244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_sample_api"}]}